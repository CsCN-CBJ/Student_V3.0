/**************************
**题目：学生成绩管理系统V3.0
**姓名：陈柏居
**学号：200110705
**修改日期：2020/11/02
***************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define N 30    //最大人数
#define LEN 20  //最长姓名
#define COURSE 6//最多科目
void ReadData(int n,int course,int score[][COURSE+1],long ID[],char name[][LEN]);
void ListRecord(int n,int course,int score[][COURSE+1],long ID[],char name[][LEN],float aver[]);
void CalculateCourse(int n,int course,int score[][COURSE+1]);
void Calculate(int n,int course,int score[][COURSE+1],float aver[]);
void SortScore(int n,int score[][COURSE+1],long ID[],char name[][LEN],int(*compare)(int a,int b));
void SortID(int n,int score[][COURSE+1],long ID[],char name[][LEN],int(*compare)(long a,long b));
void SortName(int n,int score[][COURSE+1],long ID[],char name[][LEN]);
int DescendInt(int a,int b)                         //降序排序int所用
    {return a<b;}
int AscendInt(int a,int b)                          //升序排序int所用
    {return a>b;}
int AscendLong(long a,long b)                       //升序排序long所用
    {return a>b;}
void SwapInt(int *a,int *b);
void SwapLong(long *a,long *b);
void SwapString(char a[],char b[]);
void FindID(int n,int course,int score[][COURSE+1],long ID[],long id);
void FindName(int n,int course,int score[][COURSE+1],char name[][LEN],char stu[]);
void Analyse(int n,int ccourse,int score[][COURSE+1]);
int main()
{
    printf("Number:200110705\nsubject No.7 - program No.1\n");
    int choice=-1;      //判断选择
    int score[N][COURSE+1];//成绩数组,最后一个存放总分
    float aver[N];      //学生平均分
    int course=0;       //课程数量
    int flag=0;         //是否录入数据
    long studentID[N];  //学号
    int n=0;            //输入学生的数量
    long IDSearch=-1;   //搜索学号
    char name[N][LEN];  //学生姓名
    char stu[LEN];      //搜索学生姓名
    while(1){           //录入学生数量
            printf("How many students?");
            if(scanf("%d",&n)&&n>0)
                break;
            printf("Please enter a valid number!\n");
            while(getchar()!='\n');
        }
    while(1){           //录入课程数量
            printf("How many courses?");
            if(scanf("%d",&course)&&course>0)
                break;
            printf("Please enter a valid number!\n");
            while(getchar()!='\n');
        }
    while(1){
        while(getchar()!='\n');         //防止缓冲区有残留
        printf("1.Input record\n");
        printf("2.List record\n");
        printf("3.Calculate total and average score of every course\n");
        printf("4.Calculate total and average score of every student\n");
        printf("5.Sort in descending order by score\n");
        printf("6.Sort in ascending order by score\n");
        printf("7.Sort in ascending order by StudentID\n");
        printf("8.Sort by name\n");
        printf("9.Search by StudentID\n");
        printf("10.Search by Name\n");
        printf("11.Statistic analysis\n");
        printf("0.exit\n");
        printf("Please enter your choice:");
        scanf("%d",&choice);
        if(choice==0)//只有输入0才会退出
        {
            printf("Programme is over!");
            return 0;
        }
        if(choice!=1&&!flag)            //要求先录入数据
        {
            printf("Please enter your data first!\n");
            system("pause");
            continue;
        }
        switch(choice)
        {
            case 1:
                ReadData(n,course,score,studentID,name);
                Calculate(n,course,score,aver);
                flag=1;
                break;
            case 2:;
                ListRecord(n,course,score,studentID,name,aver);
                break;
            case 3:
                CalculateCourse(n,course,score);
                break;
            case 4:
                Calculate(n,course,score,aver);
                ListRecord(n,course,score,studentID,name,aver);
                break;
            case 5:
                SortScore(n,score,studentID,name,DescendInt);
                ListRecord(n,course,score,studentID,name,aver);
                break;
            case 6:
                SortScore(n,score,studentID,name,AscendInt);
                ListRecord(n,course,score,studentID,name,aver);
                break;
            case 7:
                SortID(n,score,studentID,name,AscendLong);
                ListRecord(n,course,score,studentID,name,aver);
                break;
            case 8:
                SortName(n,score,studentID,name);
                ListRecord(n,course,score,studentID,name,aver);
                break;
            case 9:
                SortID(n,score,studentID,name,AscendLong);
                while(1){                   //录入合法学号
                    while(getchar()!='\n');
                    printf("Please enter the ID you want to search for:");
                    if(scanf("%ld",&IDSearch)&&IDSearch>=0)
                        break;
                    printf("Please enter a valid number!\n");
                }
                FindID(n,course,score,studentID,IDSearch);
                break;
            case 10:
                SortScore(n,score,studentID,name,DescendInt);
                while(1){                   //录入合法姓名
                    while(getchar()!='\n');
                    printf("Please enter the name you want to search for:");
                    if(scanf("%[^\n]",stu))
                        break;
                    printf("Please enter a valid name!\n");
                }
                FindName(n,course,score,name,stu);
                break;
            case 11:
                Analyse(n,course,score);
                break;
            default:                        //非法输入提示
                 printf("Please enter a valid number!\n");
                 system("pause");
                 break;
        }
    }
}
/**************
**函数功能：读取数据
**输入：学生人数，学生成绩数组，学生姓名数组，学生学号数组，学生姓名数组
***************/
void ReadData(int n,int course,int score[][COURSE+1],long ID[],char name[][LEN])
{
    int valid=0;    //合法成绩
    for(int i=0;i<n;i++)         //依次录取每名学生的学号姓名，并检测合法性
    {
        while(1){
            while(getchar()!='\n');
            printf("Please enter the ID of NO.%d student:",i+1);
            if(scanf("%ld",&ID[i]))
                break;
            printf("Please enter a valid number!\n");
        }
        while(1){
            while(getchar()!='\n');
            printf("Please enter the name of NO.%d student:",i+1);
            if(scanf("%[^\n]",name[i]))     //读取最大长度为LEN-1的带空格字符串
                break;
            printf("Please enter a valid name!\n");
        }
        while(1){
            while(getchar()!='\n');
            printf("Please enter %d scores of NO.%d student:",course,i+1);
            valid=0;
            for(int j=0;j<course;j++)
            {
                if(scanf("%d",&score[i][j]))
                    valid++;
                if(j<course-1)
                    getchar();
            }
            if(valid==course)   //只有成功读取所有课的成绩，才会继续
                break;
            printf("Please enter enough valid numbers!\n");
        }
    }
}
/**************
**函数功能：列出数据
**输入：学生人数，学生成绩数组，学生学号数组
**输出：学号-成绩表（输出到显示器）
***************/
void ListRecord(int n,int course,int score[][COURSE+1],long ID[],char name[][LEN],float aver[])
{
    printf("ID\t\t name\t\t      score\t\t\t\tsum\taverage\n");
    for(int i=0;i<n;i++)
    {
        printf("%-9ld\t %-20s ",ID[i],name[i]);
        for(int j=0;j<course;j++)
            printf("%-5d",score[i][j]);
        for(int j=0;j<COURSE-course;j++)
            printf("\t");
        printf("%d\t",score[i][COURSE]);
        printf("%.2f\n",aver[i]);
        printf("\n");
    }
    system("pause");                            //暂停，方便阅读
}
/**************
**函数功能：计算课程的总分与平均分
**输入：学生人数，学生成绩数组
**输出：总分与平均分（输出到显示器）
***************/
void CalculateCourse(int n,int course,int score[][COURSE+1])
{
    int sum;      //课程总分
    float aver;   //课程平均分
    printf("\t sum\t average\n");
    for(int i=0;i<course;i++)
    {
        sum=0;
        for(int j=0;j<n;j++)
            sum+=score[j][i];
        aver=(float)sum/n;
        printf("Course%d\t%d\t%.2f\n",i+1,sum,aver);//列表
    }
    system("pause");
}
/**************
**函数功能：计算学生的总分与平均分
**输入：学生人数，学生成绩数组
**输出：总分与平均分（输出到显示器）
***************/
void Calculate(int n,int course,int score[][COURSE+1],float aver[])
{
    for(int i=0;i<n;i++)
    {
        score[i][COURSE]=0;          //计算总分，并存到成绩数组的最后一列
        for(int j=0;j<course;j++)
            score[i][COURSE]+=score[i][j];
        aver[i]=(float)score[i][COURSE]/course;
    }
    printf("Students records calculated\n");
}
/**************
**函数功能：按成绩排序
**输入：学生人数，学生成绩数组，学生学号数组，学生姓名数组，升降序函数指针
**输出：将数组重新排序，无显式输出
***************/
void SortScore(int n,int score[][COURSE+1],long ID[],char name[][LEN],int(*compare)(int a,int b))
{
    int i,j,k,m;
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
            if((*compare)(score[k][COURSE],score[j][COURSE]))       //比较大小
            {
                k=j;
            }
        }
        if(k!=i)          //进行成绩，学号，姓名的交换
        {
            for(m=0;m<=COURSE;m++)
                SwapInt(&score[k][m],&score[i][m]);
            SwapLong(&ID[k],&ID[i]);
            SwapString(name[k],name[i]);
        }
    }

}

/**************
**函数功能：按学号排序
**输入：学生人数，学生成绩数组，学生学号数组，学生姓名数组，升降序函数指针
**输出：将数组重新排序，无显式输出
**算法：选择法
***************/
void SortID(int n,int score[][COURSE+1],long ID[],char name[][LEN],int(*compare)(long a,long b))
{
    int i,j,k,m;
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
            if((*compare)(ID[k],ID[j]))       //比较大小
            {
                k=j;
            }
        }
        if(k!=i)          //进行成绩，学号，姓名的交换
        {
            for(m=0;m<=COURSE;m++)
                SwapInt(&score[k][m],&score[i][m]);
            SwapLong(&ID[k],&ID[i]);
            SwapString(name[k],name[i]);
        }
    }
}
/**************
**函数功能：按姓名字典顺序排序
**输入：学生人数，学生成绩数组，学生学号数组，学生姓名数组，升降序函数指针
**输出：将数组重新排序，无显式输出
**算法：冒泡法
***************/
void SortName(int n,int score[][COURSE+1],long ID[],char name[][LEN])
{
    int flag=0;     //本次遍历是否有元素交换
    int i,m;
    do
    {
        flag=0;
        for(i=0;i<n-1;i++)
        {
            if(strcmp(name[i],name[i+1])>0)
            {
                for(m=0;m<=COURSE;m++)
                    SwapInt(&score[i+1][m],&score[i][m]);
                SwapLong(&ID[i+1],&ID[i]);
                SwapString(name[i+1],name[i]);
            }
        }
    }while(flag);       //无元素交换则返回
}
/**************
**函数功能：交换两个int型数据
**输入：需要交换的两个数据的指针
**输出：用指针将两数交换，无显式输出
***************/
void SwapInt(int *a,int *b)//函数功能：通过指针交换两个int数
{
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}
/**************
**函数功能：交换两个long型数据
**输入：需要交换的两个数据的指针
**输出：用指针将两数交换，无显式输出
***************/
void SwapLong(long *a,long *b)//函数功能：通过指针交换两个long数
{
    long temp;
    temp=*a;
    *a=*b;
    *b=temp;
}
/**************
**函数功能：交换两个字符串
**输入：需要交换的两个数据的指针
**输出：用指针将两字符串交换，无显式输出
***************/
void SwapString(char a[],char b[])
{
    char temp[LEN];
    strcpy(temp,a);
    strcpy(a,b);
    strcpy(b,temp);
}
/**************
**函数功能：通过学号搜索学生成绩
**输入：学生人数，学生成绩数组，学生学号数组，需要搜索的学号
**输出：该学号学生的成绩，若搜索失败则输出失败提示
**算法：二分法
***************/
void FindID(int n,int course,int score[][COURSE+1],long ID[],long id)
{
    int min=0;  //当前确定的最小值
    int max=n-1;//当前确定的最大值
    int mid;
    int result=-1;//存储最终位次，未找到则为-1
    if(ID[0]==id)   //先看首尾
    {
        result=0;
    }
    else if(ID[n-1]==id)
    {
        result=n-1;
    }
    else
    {
        while(max-min>1)//循环取中值
        {
            mid=(max+min)/2;
            if(ID[mid]==id)
            {
                result=mid;
                break;
            }
            else if(ID[mid]>id)
                max=mid;
            else
                min=mid;
        }
    }
    if(result==-1)//找不到
    {
        printf("Not Found!");
        system("pause");
    }
    else            //找到输出
    {
        int rank=0;
        for(int i=0;i<n;i++)
        {
            if(score[i][COURSE]>score[result][COURSE])
                rank++;
        }
        printf("NO.%d\t Score:",rank+1);
        for(int i=0;i<course;i++)
            printf("%-4d",score[result][i]);
        printf("\n");
        system("pause");
    }
}
/**************
**函数功能：通过姓名搜索学生成绩
**输入：学生人数，学生成绩数组，学生姓名数组，需要搜索的姓名
**输出：该学号学生的成绩，若搜索失败则输出失败提示
***************/
void FindName(int n,int course,int score[][COURSE+1],char name[][LEN],char stu[])
{
    for(int i=0;i<n;i++)//遍历所有学生姓名
    {
        if(strcmp(stu,name[i])==0)//比较是否一致
        {
            printf("NO.%d\t Score:",i+1);
            for(int j=0;j<course;j++)
                printf("%-4d",score[i][j]);
            printf("\n");
            system("pause");
            return ;
        }
    }
    printf("Not Found!\n");
    system("pause");
    return;
}
/**************
**函数功能：分析学生成绩
**输入：学生人数，学生成绩数组
**输出：各分数段学生人数及占比的表格（输出到屏幕）
***************/
void Analyse(int n,int course,int score[][COURSE+1])
{
    char *rank[5]={"  优秀","  良好","  中等","  及格","不及格"};//指针数组
    int num[COURSE][5];         //每门课各分数段学生人数
    int line[6]={101,90,80,70,60,0};    //分数段控制线
    int i,j,k;          //计数变量
    //表头
    printf("\tCourse1");
    for(i=1;i<course;i++)
        printf("\t\tCourse%d",i+1);
    printf("\n");

    for(i=0;i<5;i++)//5个分数段
    {
        printf("%s\t",rank[i]);//分数段名称
        for(j=0;j<course;j++)   //课程数
        {
            num[j][i]=0;
            for(k=0;k<n;k++)    //寻找该课程该分数段人数
            {
                if(score[k][j]<line[i]&&score[k][j]>=line[i+1])
                    num[j][i]++;
            }
            printf("%-4d%3.1f%c\t",num[j][i],(float)num[j][i]*100/n,'%');
        }
        printf("\n");
    }
    system("pause");    //暂停便于阅读
}
